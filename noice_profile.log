FUNCTION  <SNR>40_Remove_Matches()
    Defined: C:\Program Files\Neovim\share/nvim/runtime/plugin/matchparen.vim:206
Called 28 times
Total time:   0.000724
 Self time:   0.000724

count  total (s)   self (s)
   28              0.000158   if exists('w:paren_hl_on') && w:paren_hl_on
                                while !empty(w:matchparen_ids)
                                  silent! call remove(w:matchparen_ids, 0)->matchdelete()
                                endwhile
                                let w:paren_hl_on = 0
   28              0.000021   endif

FUNCTION  <SNR>68_SynSet()
    Defined: C:\Program Files\Neovim\share\nvim\runtime\syntax\synload.vim:27
Called 8 times
Total time:   0.163824
 Self time:   0.163824

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    8              0.000038   syn clear
    8              0.000030   if exists("b:current_syntax")
                                unlet b:current_syntax
    8              0.000007   endif
                            
    8              0.000056   0verbose let s = expand("<amatch>")
    8              0.000022   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    8              0.000015   elseif s == "OFF"
                                let s = ""
    8              0.000004   endif
                            
    8              0.000011   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
   16              0.000124     for name in split(s, '\.')
    8              0.000023       if !empty(name)
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    8              0.163149         exe $'runtime! syntax/{name}[.]{{vim,lua}} syntax/{name}/*.{{vim,lua}}'
    8              0.000047       endif
   16              0.000025     endfor
    8              0.000009   endif

FUNCTION  <SNR>40_Highlight_Matching_Pair()
    Defined: C:\Program Files\Neovim\share/nvim/runtime/plugin/matchparen.vim:44
Called 28 times
Total time:   0.005760
 Self time:   0.005036

count  total (s)   self (s)
   28              0.000339   if !exists("w:matchparen_ids")
                                let w:matchparen_ids = []
   28              0.000044   endif
                              " Remove any previous match.
   28   0.001118   0.000393   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
   28              0.000218   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
   28              0.000018   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
   28              0.000142   let c_lnum = line('.')
   28              0.000100   let c_col = col('.')
   28              0.000049   let before = 0
                            
   28              0.000124   let text = getline(c_lnum)
   28              0.000873   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
   28              0.000102   if empty(matches)
                                let [c_before, c] = ['', '']
   28              0.000031   else
   28              0.000322     let [c_before, c] = matches[1:2]
   28              0.000029   endif
   28              0.000692   let plist = split(&matchpairs, '.\zs[:,]')
   28              0.000151   let i = index(plist, c)
   28              0.000054   if i < 0
                                " not found, in Insert mode try character before the cursor
   28              0.000151     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
   28              0.000026     endif
   28              0.000043     if i < 0
                                  " not found, nothing to do
   28              0.000044       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
                              if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
                              endif
                              if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
                              if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
                              endif
                            
                              if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
                              else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
                                let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
                                try
                                  execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
                                endtry
                              endif
                            
                              " Limit the search to lines visible in the window.
                              let stoplinebottom = line('w$')
                              let stoplinetop = line('w0')
                              if i % 2 == 0
                                let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
                              endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
                              if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
                              endif
                              try
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
                              if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
                              endif
                            
                              " If a match is found setup match highlighting.
                              if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
                                if s:has_matchaddpos
                                  call add(w:matchparen_ids, matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10))
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                  call add(w:matchparen_ids, 3)
                                endif
                                let w:paren_hl_on = 1
                              endif

FUNCTION  <SNR>1_LoadFTPlugin()
    Defined: C:\Program Files\Neovim\share\nvim\runtime\ftplugin.vim:15
Called 8 times
Total time:   0.252252
 Self time:   0.252252

count  total (s)   self (s)
    8              0.000065     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    8              0.000007     endif
                            
    8              0.000060     let s = expand("<amatch>")
    8              0.000019     if s != ""
    8              0.000057       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    8              0.000005       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
   16              0.000096       for name in split(s, '\.')
                                    " Load Lua ftplugins after Vim ftplugins _per directory_
                                    " TODO(clason): use nvim__get_runtime when supports globs and modeline
                                    " XXX: "[.]" in the first pattern makes it a wildcard on Windows
    8              0.251658         exe $'runtime! ftplugin/{name}[.]{{vim,lua}} ftplugin/{name}_*.{{vim,lua}} ftplugin/{name}/*.{{vim,lua}}'
   16              0.000069       endfor
    8              0.000012     endif

FUNCTION  <SNR>2_LoadIndent()
    Defined: C:\Program Files\Neovim\share\nvim\runtime\indent.vim:14
Called 8 times
Total time:   0.092909
 Self time:   0.092909

count  total (s)   self (s)
    8              0.000075     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    8              0.000007     endif
    8              0.000075     let s = expand("<amatch>")
    8              0.000025     if s != ""
    8              0.000024       if exists("b:did_indent")
                            	unlet b:did_indent
    8              0.000006       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
   16              0.000136       for name in split(s, '\.')
                                    " XXX: "[.]" in the pattern makes it a wildcard on Windows
    8              0.092302         exe $'runtime! indent/{name}[.]{{vim,lua}}'
   16              0.000064       endfor
    8              0.000010     endif

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
    8   0.252252             <SNR>1_LoadFTPlugin()
    8   0.163824             <SNR>68_SynSet()
    8   0.092909             <SNR>2_LoadIndent()
   28   0.005760   0.005036  <SNR>40_Highlight_Matching_Pair()
   28   0.000724             <SNR>40_Remove_Matches()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
    8              0.252252  <SNR>1_LoadFTPlugin()
    8              0.163824  <SNR>68_SynSet()
    8              0.092909  <SNR>2_LoadIndent()
   28   0.005760   0.005036  <SNR>40_Highlight_Matching_Pair()
   28              0.000724  <SNR>40_Remove_Matches()

